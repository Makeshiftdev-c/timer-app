{"version":3,"sources":["helpers.js","App.js","serviceWorker.js","index.js"],"names":["window","helpers","millisecondsToHuman","ms","seconds","Math","floor","minutes","pad","toString","join","numberString","size","padded","length","newTimer","attrs","timer","title","project","id","uuid","v4","elapsed","findById","array","cb","forEach","el","renderElapsedString","runningSince","totalElapsed","Date","now","TimersDashboard","state","timers","handleCreateFormSubmit","createTimer","handleEditFormSubmit","updateTimer","handleTrashClick","timerId","deleteTimer","handleStartClick","startTimer","handleStopClick","stopTimer","t","setState","concat","map","Object","assign","filter","lastElapsed","className","this","onFormSubmit","onTrashClick","onStartClick","onStopClick","React","Component","EditableTimerList","props","key","EditableTimer","editFormOpen","handleEditClick","openForm","handleFormClose","closeForm","handleSubmit","onFormClose","onEditClick","TimerForm","handleTitleChange","e","target","value","handleProjectChange","submitText","type","onChange","onClick","ToggleableTimerForm","isOpen","handleFormOpen","handleFormSubmit","Timer","forceUpdateInterval","setInterval","forceUpdate","clearInterval","elapsedString","timerIsRunning","TimerActionButton","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.449281f1.chunk.js","sourcesContent":["window.helpers = (function () {\n  function newTimer(attrs = {}) {\n    const timer = {\n      title: attrs.title || 'Timer',\n      project: attrs.project || '',\n      id: uuid.v4(), // eslint-disable-line no-undef\n      elapsed: 0,\n    };\n\n    return timer;\n  }\n\n  function findById(array, id, cb) {\n    array.forEach((el) => {\n      if (el.id === id) {\n        cb(el);\n        return;\n      }\n    });\n  }\n\n  function renderElapsedString(elapsed, runningSince) {\n    let totalElapsed = elapsed;\n    if (runningSince) {\n      totalElapsed += Date.now() - runningSince;\n    }\n    return millisecondsToHuman(totalElapsed);\n  }\n\n  function millisecondsToHuman(ms) {\n    const seconds = Math.floor((ms / 1000) % 60);\n    const minutes = Math.floor((ms / 1000 / 60) % 60);\n    const hours = Math.floor(ms / 1000 / 60 / 60);\n\n    const humanized = [\n      pad(hours.toString(), 2),\n      pad(minutes.toString(), 2),\n      pad(seconds.toString(), 2),\n    ].join(':');\n\n    return humanized;\n  }\n\n  function pad(numberString, size) {\n    let padded = numberString;\n    while (padded.length < size) padded = `0${padded}`;\n    return padded;\n  }\n\n  return {\n    millisecondsToHuman,\n    newTimer,\n    findById,\n    renderElapsedString,\n  };\n}());\n\nexport default window.helpers;\n","import React from 'react';\nimport './App.css';\nimport helpers from './helpers.js';\nimport uuid from 'uuid';\n\nclass TimersDashboard extends React.Component {\n    state = {\n        timers: [\n            {\n                title: \"Timer\",\n                project: \"\",\n                id: uuid.v4(),\n                elapsed: 0,\n                runningSince: null,\n            },\n        ],\n    };\n    handleCreateFormSubmit = (timer) => {\n        this.createTimer(timer);\n    };\n    handleEditFormSubmit = (attrs) => {\n        this.updateTimer(attrs);\n    };\n    handleTrashClick = (timerId) => {\n        this.deleteTimer(timerId);\n    };\n    handleStartClick = (timerId) => {\n        this.startTimer(timerId);\n    };\n    handleStopClick = (timerId) => {\n        this.stopTimer(timerId);\n    };\n    createTimer = (timer) => {\n        const t = helpers.newTimer(timer);\n        this.setState({\n            timers: this.state.timers.concat(t),\n        });\n    };\n    updateTimer = (attrs) => {\n        this.setState({\n            timers: this.state.timers.map((timer) => {\n                if (timer.id === attrs.id) {\n                    return Object.assign({}, timer, {\n                        title: attrs.title,\n                        project: attrs.project,\n                    });\n                }\n                else {\n                    return timer;\n                }\n            }),\n        });\n    };\n    deleteTimer = (timerId) => {\n        this.setState({\n            timers: this.state.timers.filter(t => t.id !== timerId),\n        });\n    };\n    startTimer = (timerId) => {\n        const now = Date.now();\n        this.setState({\n            timers: this.state.timers.map((timer) => {\n                if (timer.id === timerId) {\n                    return Object.assign({}, timer, {\n                        runningSince: now,\n                    });\n                }\n                else {\n                    return timer;\n                }\n            }),\n        });\n    };\n    stopTimer = (timerId) => {\n        const now = Date.now();\n        this.setState({\n            timers: this.state.timers.map((timer) => {\n                if (timer.id === timerId) {\n                    const lastElapsed = now - timer.runningSince;\n                    return Object.assign({}, timer, {\n                        elapsed: timer.elapsed + lastElapsed,\n                        runningSince: null,\n                    });\n                }\n                else {\n                    return timer;\n                }\n            }),\n        });\n    };\n    render () {\n        return (\n            <div className=\"ui three column centered grid\">\n                <div className=\"column\">\n                    <EditableTimerList\n                        timers={ this.state.timers }\n                        onFormSubmit={ this.handleEditFormSubmit }\n                        onTrashClick={ this.handleTrashClick }\n                        onStartClick={ this.handleStartClick }\n                        onStopClick={ this.handleStopClick }\n                    />\n                    <ToggleableTimerForm\n                        onFormSubmit={ this.handleCreateFormSubmit }\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nclass EditableTimerList extends React.Component {\n    render () {\n        const timers = this.props.timers.map((timer) => (\n            <EditableTimer\n                key={ timer.id }\n                id={ timer.id }\n                title={ timer.title }\n                project={ timer.project }\n                elapsed={ timer.elapsed }\n                runningSince={ timer.runningSince }\n                onFormSubmit={ this.props.onFormSubmit }\n                onTrashClick={ this.props.onTrashClick }\n                onStartClick={ this.props.onStartClick }\n                onStopClick={ this.props.onStopClick }\n            />\n        ));\n        return (\n            <div id=\"timers\">\n                { timers }\n            </div>\n        );\n    }\n}\n\nclass EditableTimer extends React.Component {\n    state = {\n        editFormOpen: false,\n    };\n    handleEditClick = () => {\n        this.openForm();\n    };\n    handleFormClose = () => {\n        this.closeForm();\n    };\n    handleSubmit = (timer) => {\n        this.props.onFormSubmit(timer);\n        this.closeForm();\n    };\n    closeForm = () => {\n        this.setState({ editFormOpen: false });\n    };\n    openForm = () => {\n        this.setState({ editFormOpen: true });\n    };\n    render () {\n        if (this.state.editFormOpen) {\n            return (\n                <TimerForm\n                    id={ this.props.id }\n                    title={ this.props.title }\n                    project={ this.props.project }\n                    onFormSubmit={ this.handleSubmit }\n                    onFormClose={ this.handleFormClose }\n                />\n            ); \n        }\n        else {\n            return (\n                <Timer\n                    id={ this.props.id }\n                    title={ this.props.title }\n                    project={ this.props.project }\n                    elapsed={ this.props.elapsed }\n                    runningSince={ this.props.runningSince }\n                    onEditClick={ this.handleEditClick }\n                    onTrashClick={ this.props.onTrashClick }\n                    onStartClick={ this.props.onStartClick }\n                    onStopClick={ this.props.onStopClick }\n                />\n            );\n        }\n    }\n}\n\nclass TimerForm extends React.Component {\n    state = {\n        title: this.props.title || '',\n        project: this.props.project || '',\n    };\n    handleTitleChange = (e) => {\n        this.setState({ title: e.target.value });\n    };\n    handleProjectChange = (e) => {\n        this.setState({ project: e.target.value });\n    };\n    handleSubmit = () => {\n        this.props.onFormSubmit({\n            id: this.props.id,\n            title: this.state.title,\n            project: this.state.project,\n        });\n    }\n    render () {\n        const submitText = this.state.id ? 'Update' : 'Create';\n        return (\n            <div className=\"ui centered card\">\n                <div className=\"content\">\n                    <div className=\"ui form white\">\n                        <div className=\"field\">\n                            <label>Title</label>\n                            <input type=\"text\" value={ this.state.title } onChange={ this.handleTitleChange } />\n                        </div>\n                        <div className=\"field\">\n                            <label>Description</label>\n                            <input type=\"text\" value={ this.state.project } onChange={ this.handleProjectChange } />\n                        </div>\n                        <div className=\"ui two bottom attached buttons\">\n                            <button className=\"ui basic blue button\" onClick={ this.handleSubmit }>\n                                { submitText }\n                            </button>\n                            <button className=\"ui basic red button\" onClick={ this.props.onFormClose }>\n                                Cancel\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass ToggleableTimerForm extends React.Component {\n    state = {\n        isOpen: false,\n    };\n    handleFormOpen = () => {\n        this.setState({ isOpen: true });\n    };\n    handleFormClose = () => {\n        this.setState({ isOpen: false });\n    };\n    handleFormSubmit = (timer) => {\n        this.props.onFormSubmit(timer);\n        this.setState({ isOpen: false });\n    };\n    render () {\n        if (this.state.isOpen) {\n            return (\n                <TimerForm\n                    onFormSubmit={ this.handleFormSubmit }\n                    onFormClose={ this.handleFormClose }\n                />\n            );\n        }\n        else {\n            return (\n                <div className=\"ui basic content center aligned segment\">\n                    <button className=\"ui yellow basic button icon\" onClick={ this.handleFormOpen }>\n                        <i className=\"plus icon\" />\n                    </button>\n                </div>\n            );\n        }\n    }\n}\n\nclass Timer extends React.Component {\n    componentDidMount() {\n        this.forceUpdateInterval = setInterval(() => this.forceUpdate(), 50);\n    }\n    componentWillUnmount() {\n        clearInterval(this.forceUpdateInterval);\n    }\n    handleStartClick = () => {\n        this.props.onStartClick(this.props.id);\n    };\n    handleStopClick = () => {\n        this.props.onStopClick(this.props.id);\n    };\n    handleTrashClick = () => {\n        this.props.onTrashClick(this.props.id);  \n    };\n    render () {\n        const elapsedString = helpers.renderElapsedString(\n            this.props.elapsed, this.props.runningSince\n        );\n        return (\n            <div className=\"ui centered card\">\n                <div className=\"content\">\n                    <div className=\"header\">\n                        { this.props.title }\n                    </div>\n                    <div className=\"meta\">\n                        { this.props.project }\n                    </div>\n                    <div className=\"center aligned description\">\n                        <h2>\n                            { elapsedString }\n                        </h2>\n                    </div>\n                    <div className=\"extra content\">\n                        <span className=\"right floated edit icon\" onClick={ this.props.onEditClick }>\n                            <i className=\"edit icon\" />\n                        </span>\n                        <span className=\"right floated trash icon\" onClick={ this.handleTrashClick }>\n                            <i className=\"trash icon\" />\n                        </span>\n                    </div>\n                </div>\n                <TimerActionButton\n                    timerIsRunning={ !!this.props.runningSince }\n                    onStartClick={ this.handleStartClick }\n                    onStopClick={ this.handleStopClick }\n                />\n            </div>\n        );\n    }\n}\n\nclass TimerActionButton extends React.Component {\n    render() {\n        if (this.props.timerIsRunning) {\n            return (\n                <div\n                    className=\"ui bottom attached red basic button\"\n                    onClick={ this.props.onStopClick }\n                >\n                    Stop\n                </div>\n            );\n        }\n        else {\n            return (\n                <div\n                    className=\"ui bottom attached blue basic button\"\n                    onClick={ this.props.onStartClick}\n                >\n                    Start\n                </div>\n            );\n        }\n    }\n}\n\nfunction App() {\n  return (\n      <TimersDashboard />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('content')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}